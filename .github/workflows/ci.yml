name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test
  NEXTAUTH_URL: http://localhost:3000
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_tax_prep_test
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_tax_prep_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Install dependencies
      run: |
        npm install --no-package-lock --verbose
        npm install -g jest@latest
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Generate Prisma Client
      run: npx prisma generate
      
    - name: Run database migrations
      run: npx prisma migrate deploy
        
    - name: Check environment
      run: |
        echo "Node version: $(node -v)"
        echo "NPM version: $(npm -v)"
        echo "Checking required environment variables..."
        [[ -z "${NEXTAUTH_URL}" ]] && echo "NEXTAUTH_URL is missing" || echo "NEXTAUTH_URL is set"
        [[ -z "${DATABASE_URL}" ]] && echo "DATABASE_URL is missing" || echo "DATABASE_URL is set"
        [[ -z "${NEXTAUTH_SECRET}" ]] && echo "NEXTAUTH_SECRET is missing" || echo "NEXTAUTH_SECRET is set"
        [[ -z "${STRIPE_SECRET_KEY}" ]] && echo "STRIPE_SECRET_KEY is missing" || echo "STRIPE_SECRET_KEY is set"
        [[ -z "${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}" ]] && echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY is missing" || echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY is set"
        [[ -z "${OPENAI_API_KEY}" ]] && echo "OPENAI_API_KEY is missing" || echo "OPENAI_API_KEY is set"
        echo "Checking PostgreSQL connection..."
        nc -zv localhost 5432 || echo "Cannot connect to PostgreSQL"
        
    - name: Type check
      run: npx tsc --noEmit
        
    - name: Build application
      run: |
        echo "Starting build process..."
        npm run build --verbose
      env:
        NODE_OPTIONS: --max-old-space-size=4096
        DEBUG: '*'
        
    - name: Run tests
      run: |
        echo "Starting tests..."
        npm run test:ci --verbose
      env:
        NODE_OPTIONS: --max-old-space-size=4096
        DEBUG: '*'
      continue-on-error: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          coverage/
          junit.xml
        retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy to Vercel
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}