name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test
  NEXTAUTH_URL: http://localhost:3000
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_tax_prep_test
  NEXTAUTH_SECRET: test-secret
  STRIPE_SECRET_KEY: sk_test_dummy
  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_dummy
  OPENAI_API_KEY: sk-test-dummy
  ENCRYPTION_KEY: test-encryption-key

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_tax_prep_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Install dependencies
      run: |
        npm install
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Generate Prisma Client
      run: npx prisma generate
      
    - name: Run database migrations
      run: npx prisma migrate deploy
        
    - name: Check environment
      run: |
        echo "Node version: $(node -v)"
        echo "NPM version: $(npm -v)"
        echo "Checking PostgreSQL connection..."
        nc -zv localhost 5432 || echo "Cannot connect to PostgreSQL"
        
    - name: Type check
      run: npx tsc --noEmit
        
    - name: Build application
      run: npm run build
      env:
        NODE_OPTIONS: --max-old-space-size=4096
        
    - name: Run tests
      run: npm run test:ci
      env:
        NODE_OPTIONS: --max-old-space-size=4096

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          junit.xml

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy to Vercel
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}